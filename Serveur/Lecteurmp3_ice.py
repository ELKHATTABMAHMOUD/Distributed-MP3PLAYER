# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `Lecteurmp3.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Lecteurmp3
_M_Lecteurmp3 = Ice.openModule('Lecteurmp3')
__name__ = 'Lecteurmp3'

if 'Morceau' not in _M_Lecteurmp3.__dict__:
    _M_Lecteurmp3.Morceau = Ice.createTempClass()
    class Morceau(Ice.Value):
        def __init__(self, titre='', artiste='', genre='', ressource=''):
            self.titre = titre
            self.artiste = artiste
            self.genre = genre
            self.ressource = ressource

        def ice_id(self):
            return '::Lecteurmp3::Morceau'

        @staticmethod
        def ice_staticId():
            return '::Lecteurmp3::Morceau'

        def __str__(self):
            return IcePy.stringify(self, _M_Lecteurmp3._t_Morceau)

        __repr__ = __str__

    _M_Lecteurmp3._t_Morceau = IcePy.defineValue('::Lecteurmp3::Morceau', Morceau, -1, (), False, False, None, (
        ('titre', (), IcePy._t_string, False, 0),
        ('artiste', (), IcePy._t_string, False, 0),
        ('genre', (), IcePy._t_string, False, 0),
        ('ressource', (), IcePy._t_string, False, 0)
    ))
    Morceau._ice_type = _M_Lecteurmp3._t_Morceau

    _M_Lecteurmp3.Morceau = Morceau
    del Morceau

if '_t_signalAudio' not in _M_Lecteurmp3.__dict__:
    _M_Lecteurmp3._t_signalAudio = IcePy.defineSequence('::Lecteurmp3::signalAudio', (), IcePy._t_float)

if '_t_listMorceaux' not in _M_Lecteurmp3.__dict__:
    _M_Lecteurmp3._t_listMorceaux = IcePy.defineSequence('::Lecteurmp3::listMorceaux', (), _M_Lecteurmp3._t_Morceau)

if '_t_entiers' not in _M_Lecteurmp3.__dict__:
    _M_Lecteurmp3._t_entiers = IcePy.defineSequence('::Lecteurmp3::entiers', (), IcePy._t_int)

_M_Lecteurmp3._t_Manager = IcePy.defineValue('::Lecteurmp3::Manager', Ice.Value, -1, (), False, True, None, ())

if 'ManagerPrx' not in _M_Lecteurmp3.__dict__:
    _M_Lecteurmp3.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def ajouterMorceau(self, titre, genre, auteur, adresse, context=None):
            return _M_Lecteurmp3.Manager._op_ajouterMorceau.invoke(self, ((titre, genre, auteur, adresse), context))

        def ajouterMorceauAsync(self, titre, genre, auteur, adresse, context=None):
            return _M_Lecteurmp3.Manager._op_ajouterMorceau.invokeAsync(self, ((titre, genre, auteur, adresse), context))

        def begin_ajouterMorceau(self, titre, genre, auteur, adresse, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_ajouterMorceau.begin(self, ((titre, genre, auteur, adresse), _response, _ex, _sent, context))

        def end_ajouterMorceau(self, _r):
            return _M_Lecteurmp3.Manager._op_ajouterMorceau.end(self, _r)

        def rechMorceauxParArtiste(self, artiste, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParArtiste.invoke(self, ((artiste, ), context))

        def rechMorceauxParArtisteAsync(self, artiste, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParArtiste.invokeAsync(self, ((artiste, ), context))

        def begin_rechMorceauxParArtiste(self, artiste, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParArtiste.begin(self, ((artiste, ), _response, _ex, _sent, context))

        def end_rechMorceauxParArtiste(self, _r):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParArtiste.end(self, _r)

        def rechMorceauxParGenre(self, genre, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParGenre.invoke(self, ((genre, ), context))

        def rechMorceauxParGenreAsync(self, genre, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParGenre.invokeAsync(self, ((genre, ), context))

        def begin_rechMorceauxParGenre(self, genre, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParGenre.begin(self, ((genre, ), _response, _ex, _sent, context))

        def end_rechMorceauxParGenre(self, _r):
            return _M_Lecteurmp3.Manager._op_rechMorceauxParGenre.end(self, _r)

        def rechMorceauParTitre(self, titre, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParTitre.invoke(self, ((titre, ), context))

        def rechMorceauParTitreAsync(self, titre, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParTitre.invokeAsync(self, ((titre, ), context))

        def begin_rechMorceauParTitre(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParTitre.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_rechMorceauParTitre(self, _r):
            return _M_Lecteurmp3.Manager._op_rechMorceauParTitre.end(self, _r)

        def rechMorceauParLocation(self, location, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParLocation.invoke(self, ((location, ), context))

        def rechMorceauParLocationAsync(self, location, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParLocation.invokeAsync(self, ((location, ), context))

        def begin_rechMorceauParLocation(self, location, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_rechMorceauParLocation.begin(self, ((location, ), _response, _ex, _sent, context))

        def end_rechMorceauParLocation(self, _r):
            return _M_Lecteurmp3.Manager._op_rechMorceauParLocation.end(self, _r)

        def supprimerMorceauxParArtiste(self, artiste, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParArtiste.invoke(self, ((artiste, ), context))

        def supprimerMorceauxParArtisteAsync(self, artiste, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParArtiste.invokeAsync(self, ((artiste, ), context))

        def begin_supprimerMorceauxParArtiste(self, artiste, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParArtiste.begin(self, ((artiste, ), _response, _ex, _sent, context))

        def end_supprimerMorceauxParArtiste(self, _r):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParArtiste.end(self, _r)

        def supprimerMorceauxParGenre(self, genre, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParGenre.invoke(self, ((genre, ), context))

        def supprimerMorceauxParGenreAsync(self, genre, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParGenre.invokeAsync(self, ((genre, ), context))

        def begin_supprimerMorceauxParGenre(self, genre, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParGenre.begin(self, ((genre, ), _response, _ex, _sent, context))

        def end_supprimerMorceauxParGenre(self, _r):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauxParGenre.end(self, _r)

        def supprimerMorceauParTitre(self, titre, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParTitre.invoke(self, ((titre, ), context))

        def supprimerMorceauParTitreAsync(self, titre, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParTitre.invokeAsync(self, ((titre, ), context))

        def begin_supprimerMorceauParTitre(self, titre, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParTitre.begin(self, ((titre, ), _response, _ex, _sent, context))

        def end_supprimerMorceauParTitre(self, _r):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParTitre.end(self, _r)

        def supprimerMorceauParLocation(self, location, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParLocation.invoke(self, ((location, ), context))

        def supprimerMorceauParLocationAsync(self, location, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParLocation.invokeAsync(self, ((location, ), context))

        def begin_supprimerMorceauParLocation(self, location, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParLocation.begin(self, ((location, ), _response, _ex, _sent, context))

        def end_supprimerMorceauParLocation(self, _r):
            return _M_Lecteurmp3.Manager._op_supprimerMorceauParLocation.end(self, _r)

        def printstring(self, chaine, context=None):
            return _M_Lecteurmp3.Manager._op_printstring.invoke(self, ((chaine, ), context))

        def printstringAsync(self, chaine, context=None):
            return _M_Lecteurmp3.Manager._op_printstring.invokeAsync(self, ((chaine, ), context))

        def begin_printstring(self, chaine, _response=None, _ex=None, _sent=None, context=None):
            return _M_Lecteurmp3.Manager._op_printstring.begin(self, ((chaine, ), _response, _ex, _sent, context))

        def end_printstring(self, _r):
            return _M_Lecteurmp3.Manager._op_printstring.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Lecteurmp3.ManagerPrx.ice_checkedCast(proxy, '::Lecteurmp3::Manager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Lecteurmp3.ManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Lecteurmp3::Manager'
    _M_Lecteurmp3._t_ManagerPrx = IcePy.defineProxy('::Lecteurmp3::Manager', ManagerPrx)

    _M_Lecteurmp3.ManagerPrx = ManagerPrx
    del ManagerPrx

    _M_Lecteurmp3.Manager = Ice.createTempClass()
    class Manager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Lecteurmp3::Manager')

        def ice_id(self, current=None):
            return '::Lecteurmp3::Manager'

        @staticmethod
        def ice_staticId():
            return '::Lecteurmp3::Manager'

        def ajouterMorceau(self, titre, genre, auteur, adresse, current=None):
            raise NotImplementedError("servant method 'ajouterMorceau' not implemented")

        def rechMorceauxParArtiste(self, artiste, current=None):
            raise NotImplementedError("servant method 'rechMorceauxParArtiste' not implemented")

        def rechMorceauxParGenre(self, genre, current=None):
            raise NotImplementedError("servant method 'rechMorceauxParGenre' not implemented")

        def rechMorceauParTitre(self, titre, current=None):
            raise NotImplementedError("servant method 'rechMorceauParTitre' not implemented")

        def rechMorceauParLocation(self, location, current=None):
            raise NotImplementedError("servant method 'rechMorceauParLocation' not implemented")

        def supprimerMorceauxParArtiste(self, artiste, current=None):
            raise NotImplementedError("servant method 'supprimerMorceauxParArtiste' not implemented")

        def supprimerMorceauxParGenre(self, genre, current=None):
            raise NotImplementedError("servant method 'supprimerMorceauxParGenre' not implemented")

        def supprimerMorceauParTitre(self, titre, current=None):
            raise NotImplementedError("servant method 'supprimerMorceauParTitre' not implemented")

        def supprimerMorceauParLocation(self, location, current=None):
            raise NotImplementedError("servant method 'supprimerMorceauParLocation' not implemented")

        def printstring(self, chaine, current=None):
            raise NotImplementedError("servant method 'printstring' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Lecteurmp3._t_ManagerDisp)

        __repr__ = __str__

    _M_Lecteurmp3._t_ManagerDisp = IcePy.defineClass('::Lecteurmp3::Manager', Manager, (), None, ())
    Manager._ice_type = _M_Lecteurmp3._t_ManagerDisp

    Manager._op_ajouterMorceau = IcePy.Operation('ajouterMorceau', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Manager._op_rechMorceauxParArtiste = IcePy.Operation('rechMorceauxParArtiste', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Lecteurmp3._t_listMorceaux, False, 0), ())
    Manager._op_rechMorceauxParGenre = IcePy.Operation('rechMorceauxParGenre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Lecteurmp3._t_listMorceaux, False, 0), ())
    Manager._op_rechMorceauParTitre = IcePy.Operation('rechMorceauParTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Manager._op_rechMorceauParLocation = IcePy.Operation('rechMorceauParLocation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Manager._op_supprimerMorceauxParArtiste = IcePy.Operation('supprimerMorceauxParArtiste', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Manager._op_supprimerMorceauxParGenre = IcePy.Operation('supprimerMorceauxParGenre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Manager._op_supprimerMorceauParTitre = IcePy.Operation('supprimerMorceauParTitre', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Manager._op_supprimerMorceauParLocation = IcePy.Operation('supprimerMorceauParLocation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Manager._op_printstring = IcePy.Operation('printstring', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Lecteurmp3._t_entiers, False, 0), ())

    _M_Lecteurmp3.Manager = Manager
    del Manager

# End of module Lecteurmp3
